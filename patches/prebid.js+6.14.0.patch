diff --git a/node_modules/prebid.js/modules/emx_digitalBidAdapter.js b/node_modules/prebid.js/modules/emx_digitalBidAdapter.js
index 0ed23f1..7dba0d3 100644
--- a/node_modules/prebid.js/modules/emx_digitalBidAdapter.js
+++ b/node_modules/prebid.js/modules/emx_digitalBidAdapter.js
@@ -4,6 +4,8 @@ import { BANNER, VIDEO } from '../src/mediaTypes.js';
 import { Renderer } from '../src/Renderer.js';
 import includes from 'core-js-pure/features/array/includes.js';
 import find from 'core-js-pure/features/array/find.js';
+// @tab-ads-patch
+import { config } from '../src/config.js';
 
 const BIDDER_CODE = 'emx_digital';
 const ENDPOINT = 'hb.emxdgt.com';
@@ -131,10 +133,11 @@ export const emxAdapter = {
     }
   },
   getReferrer: () => {
+    // @tab-ads-patch
     try {
-      return window.top.document.referrer;
+      return config.getConfig('pageUrl') || window.location.href
     } catch (err) {
-      return document.referrer;
+      return '';
     }
   },
   getSite: (refInfo) => {
diff --git a/node_modules/prebid.js/modules/pulsepointBidAdapter.js b/node_modules/prebid.js/modules/pulsepointBidAdapter.js
index 7aa3ad6..ac42306 100644
--- a/node_modules/prebid.js/modules/pulsepointBidAdapter.js
+++ b/node_modules/prebid.js/modules/pulsepointBidAdapter.js
@@ -3,6 +3,9 @@ import { convertTypes, deepAccess, isArray, logError, isFn } from '../src/utils.
 import { registerBidder } from '../src/adapters/bidderFactory.js';
 import { Renderer } from '../src/Renderer.js';
 
+// @tab-ads-patch
+import { config } from '../src/config.js';
+
 const NATIVE_DEFAULTS = {
   TITLE_LEN: 100,
   DESCR_LEN: 200,
@@ -360,10 +363,11 @@ function app(bidderRequest) {
  * Attempts to capture the referrer url.
  */
 function referrer() {
+  // @tab-ads-patch
   try {
-    return window.top.document.referrer;
+    return config.getConfig('pageUrl') || window.location.href;
   } catch (e) {
-    return document.referrer;
+    return '';
   }
 }
 
diff --git a/node_modules/prebid.js/src/refererDetection.js b/node_modules/prebid.js/src/refererDetection.js
index 7e9f2a7..f1fb35d 100644
--- a/node_modules/prebid.js/src/refererDetection.js
+++ b/node_modules/prebid.js/src/refererDetection.js
@@ -9,179 +9,26 @@
  */
 
 import { config } from './config.js';
-import { logWarn } from './utils.js';
+
+// @tab-ads-patch
+// We modify this to use the referer info from the Prebid config
+// because our page may be loaded in a new tab page iframe, which
+// can break referer collection.
 
 /**
  * @param {Window} win Window
  * @returns {Function}
  */
 export function detectReferer(win) {
-  /**
-   * This function would return a read-only array of hostnames for all the parent frames.
-   * win.location.ancestorOrigins is only supported in webkit browsers. For non-webkit browsers it will return undefined.
-   *
-   * @param {Window} win Window object
-   * @returns {(undefined|Array)} Ancestor origins or undefined
-   */
-  function getAncestorOrigins(win) {
-    try {
-      if (!win.location.ancestorOrigins) {
-        return;
-      }
-
-      return win.location.ancestorOrigins;
-    } catch (e) {
-      // Ignore error
-    }
-  }
-
-  /**
-   * This function returns canonical URL which refers to an HTML link element, with the attribute of rel="canonical", found in the <head> element of your webpage
-   *
-   * @param {Object} doc document
-   * @returns {string|null}
-   */
-  function getCanonicalUrl(doc) {
-    let pageURL = config.getConfig('pageUrl');
-
-    if (pageURL) return pageURL;
-
-    try {
-      const element = doc.querySelector("link[rel='canonical']");
-
-      if (element !== null) {
-        return element.href;
-      }
-    } catch (e) {
-      // Ignore error
-    }
-
-    return null;
-  }
-
-  /**
-   * Referer info
-   * @typedef {Object} refererInfo
-   * @property {string} referer detected top url
-   * @property {boolean} reachedTop whether prebid was able to walk upto top window or not
-   * @property {number} numIframes number of iframes
-   * @property {string} stack comma separated urls of all origins
-   * @property {string} canonicalUrl canonical URL refers to an HTML link element, with the attribute of rel="canonical", found in the <head> element of your webpage
-   */
-
-  /**
-   * Walk up the windows to get the origin stack and best available referrer, canonical URL, etc.
-   *
-   * @returns {refererInfo}
-   */
-  function refererInfo() {
-    const stack = [];
-    const ancestors = getAncestorOrigins(win);
-    const maxNestedIframes = config.getConfig('maxNestedIframes');
-    let currentWindow;
-    let bestReferrer;
-    let bestCanonicalUrl;
-    let reachedTop = false;
-    let level = 0;
-    let valuesFromAmp = false;
-    let inAmpFrame = false;
-
-    do {
-      const previousWindow = currentWindow;
-      const wasInAmpFrame = inAmpFrame;
-      let currentLocation;
-      let crossOrigin = false;
-      let foundReferrer = null;
-
-      inAmpFrame = false;
-      currentWindow = currentWindow ? currentWindow.parent : win;
-
-      try {
-        currentLocation = currentWindow.location.href || null;
-      } catch (e) {
-        crossOrigin = true;
-      }
-
-      if (crossOrigin) {
-        if (wasInAmpFrame) {
-          const context = previousWindow.context;
-
-          try {
-            foundReferrer = context.sourceUrl;
-            bestReferrer = foundReferrer;
-
-            valuesFromAmp = true;
-
-            if (currentWindow === win.top) {
-              reachedTop = true;
-            }
-
-            if (context.canonicalUrl) {
-              bestCanonicalUrl = context.canonicalUrl;
-            }
-          } catch (e) { /* Do nothing */ }
-        } else {
-          logWarn('Trying to access cross domain iframe. Continuing without referrer and location');
-
-          try {
-            const referrer = previousWindow.document.referrer;
-
-            if (referrer) {
-              foundReferrer = referrer;
-
-              if (currentWindow === win.top) {
-                reachedTop = true;
-              }
-            }
-          } catch (e) { /* Do nothing */ }
-
-          if (!foundReferrer && ancestors && ancestors[level - 1]) {
-            foundReferrer = ancestors[level - 1];
-          }
-
-          if (foundReferrer && !valuesFromAmp) {
-            bestReferrer = foundReferrer;
-          }
-        }
-      } else {
-        if (currentLocation) {
-          foundReferrer = currentLocation;
-          bestReferrer = foundReferrer;
-          valuesFromAmp = false;
-
-          if (currentWindow === win.top) {
-            reachedTop = true;
-
-            const canonicalUrl = getCanonicalUrl(currentWindow.document);
-
-            if (canonicalUrl) {
-              bestCanonicalUrl = canonicalUrl;
-            }
-          }
-        }
-
-        if (currentWindow.context && currentWindow.context.sourceUrl) {
-          inAmpFrame = true;
-        }
-      }
-
-      stack.push(foundReferrer);
-      level++;
-    } while (currentWindow !== win.top && level < maxNestedIframes);
-
-    stack.reverse();
-
-    return {
-      referer: bestReferrer || null,
-      reachedTop,
-      isAmp: valuesFromAmp,
-      numIframes: level - 1,
-      stack,
-      canonicalUrl: bestCanonicalUrl || null
-    };
-  }
-
-  return refererInfo;
+  const currentPage = config.getConfig('pageUrl') || window.location.href
+  return {
+    referer: currentPage,
+    reachedTop: true,
+    isAmp: false,
+    numIframes: 0,
+    stack: [currentPage],
+    canonicalUrl: null,
+  };
 }
 
-export const getRefererInfo = detectReferer(window);
+export const getRefererInfo = () => detectReferer(window)
